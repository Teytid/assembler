#include <iostream>
#include <atomic>
#include <mutex>
#include <thread>
#include <vector>
#include <locale.h>


static const int K = 30;			// вместимость улея
static int N;						// пчел
static int S;					// количество меда
static int P;					// кол-во пчел в улее
static std::vector<bool> flst;		// вылетевшие

std::mutex mtx, mtx2, mtx3;
// рабочая функция потоков
void bee(int num) {

    int p, s, fl;
    for (;;)
    {
        std::unique_lock<std::mutex> lock(mtx);
        p = P; s = S; fl = flst[num];
        lock.unlock();

        // номер потока медведя
        if (num == 0)
        {
            std::unique_lock<std::mutex> lock(mtx);
            // проверим кол-во меда в улее
            if (s >= K / 2) // если больше половины или равно
            {

                std::cout << "Медведь " << "пошел за медом" << std::endl;
                std::this_thread::sleep_for(std::chrono::milliseconds(300));
                std::cout << "В улее " << P << " пчел" << std::endl;
                std::this_thread::sleep_for(std::chrono::milliseconds(300));

                // проверим кол-во пчел в улее
                if (p < 3)
                {
                    std::cout << "Медведь сьел весь мед " << std::endl;
                    S = 0;
                    std::this_thread::sleep_for(std::chrono::milliseconds(500));
                }
                else
                {
                    std::cout << "Медведя покусали " << std::endl;
                    lock.unlock();
                    // лечимся
                    std::this_thread::sleep_for(std::chrono::milliseconds(500));
                    continue;
                }

            }
            lock.unlock();
        }


        if(num > 0 ) // потоки пчел
        {

            if (fl) // возращающиеся пчелы
            {
                std::unique_lock<std::mutex> lock(mtx);
                flst[num] = false;
                if (s != K) // если мед требуется
                {
                    std::cout << "Пчела " << num << " принесла мед" << std::endl;
                    P++; S++;
                    std::cout << "В улее " << S << " меда" << std::endl;
                    std::this_thread::sleep_for(std::chrono::milliseconds(500));
                }
                else
                {
                    std::cout << "Пчела " << num << " прилетела" << std::endl;
                    P++;
                    std::cout << "В улее " << S << " меда" << std::endl;
                    std::this_thread::sleep_for(std::chrono::milliseconds(500));
                }
                lock.unlock();
                // отдых
                std::this_thread::sleep_for(std::chrono::milliseconds(500));
                continue;
            }


            if (s == K) // проверим на максимум меда в улее
            {
                std::unique_lock<std::mutex> lock(mtx);
                std::this_thread::sleep_for(std::chrono::milliseconds(500));
                lock.unlock();
                continue; // если улей наполнен ничего не делаем
            }


            // проверим колво пчел в улее

            if (p >= 2) // если больше 1 пчелы
            {
                if (s != K) // если  надо лететь
                {
                    std::unique_lock<std::mutex> lock(mtx);
                    // летим за медом
                    std::cout << "В улее " << P-- << " пчел" << std::endl;
                    std::this_thread::sleep_for(std::chrono::milliseconds(500));
                    std::cout << "Пчела " << num << " полетела за медом" << std::endl;
                    std::this_thread::sleep_for(std::chrono::milliseconds(500));
                    flst[num] = true;
                    lock.unlock();

                    // задержка на путь 1 с.
                    std::this_thread::sleep_for(std::chrono::milliseconds(1000));
                }
            }
        }
    }
}

// функция инициализации
void init()
{

    // храним потоки в векторе
    std::vector<std::thread> bees;
    for (int i = 0; i <= N; i++) {
        // создаем поток и назначаем рабочую ф-цию передав номер потока
        std::thread t(bee, i);
        // сохранить в вектор
        bees.push_back(std::move(t));
        flst.push_back(false);
    }

    // запускаем пчел
    for (auto& t : bees) {
        t.join();
    }
}

int main() {

    setlocale(LC_ALL, "RUS");

    N = 0;
    while (N <= 3)
    {
        std::cout << "Введите кол-во пчел N : ";
        std::cin >> N;
    }

    P = N; // изначально пчелы все в улее
    // запускаем инициализацию
    std::thread work(init);
    work.join();

    return 0;
}

