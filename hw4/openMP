#include <iostream>
#include <stdlib.h>
#include <omp.h>
#include <string>

int main() {
    std::string input;
    int numberOfFans;
    std::cin >> input;
    std::cin.ignore(32767, '\n');
    numberOfFans = atoi(input.c_str());
    std::string *valentines = new std::string[numberOfFans];
    for (int i = 0; i < numberOfFans; i++) {
        std::getline(std::cin, valentines[i]);
    }
    int maxPoints = 0;
    int winningFan;
    int lastFans = numberOfFans;

#pragma omp parallel for default(none) shared(maxPoints, winningFan, valentines, numberOfFans)
    for (int j = 0; j < numberOfFans; j++) {
        int points = 0;
        int fan_id = j;
        if (valentines[fan_id].find("цветы") != std::string::npos) points++;
        if (valentines[fan_id].find("конфеты") != std::string::npos) points++;
        if (valentines[fan_id].find("кино") != std::string::npos) points++;
        if (valentines[fan_id].find("ресторан") != std::string::npos) points++;
        if (valentines[fan_id].find("подарок") != std::string::npos) points++;
        if (valentines[fan_id].find("подарки") != std::string::npos) points++;
        if (valentines[fan_id].find("кафе") != std::string::npos) points++;
        if (valentines[fan_id].find("суши") != std::string::npos) points++;
        if (valentines[fan_id].find("кофе") != std::string::npos) points++;
        if (valentines[fan_id].find("свидание") != std::string::npos) {
            points++;
        } else points = 0;
#pragma omp critical
        {
            if (maxPoints < points) winningFan = fan_id;
        }
    }
#pragma omp parallel for default(none) shared(maxPoints, winningFan, valentines, numberOfFans, std::cout)
    for (int j = 0; j < numberOfFans; j++) {
        int fan_id = j;
        if (fan_id == winningFan) valentines[fan_id] = "I will go with you";
        else valentines[fan_id] = "I won't go with you";
#pragma omp critical
        {
            std::cout << "The valentine number " << fan_id + 1 << ". " << valentines[fan_id] << std::endl;
        }
    }
}
